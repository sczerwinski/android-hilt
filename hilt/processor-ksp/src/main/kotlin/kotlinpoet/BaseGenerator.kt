/*
 * Copyright 2020-2023 Slawomir Czerwinski
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package it.czerwinski.android.hilt.processor.kotlinpoet

import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.kotlinpoet.asClassName
import com.squareup.kotlinpoet.ksp.writeTo
import dagger.hilt.InstallIn
import it.czerwinski.android.hilt.processor.model.HiltModuleKind
import it.czerwinski.android.hilt.processor.model.Model

abstract class BaseGenerator<T : Model> {

    fun generateModule(
        codeGenerator: CodeGenerator,
        models: List<T>
    ) {
        FileSpec.builder(className = models.first().moduleClassName)
            .addDefaultFileComment()
            .addType(buildModuleType(models))
            .build()
            .writeTo(
                codeGenerator,
                dependencies = Dependencies(
                    aggregating = true,
                    *models.map { it.declarationFile }.toTypedArray()
                )
            )
    }

    private fun buildModuleType(models: List<T>): TypeSpec =
        when (models.first().moduleKind) {
            HiltModuleKind.OBJECT -> TypeSpec.objectBuilder(models.first().moduleClassName)
            HiltModuleKind.INTERFACE -> TypeSpec.interfaceBuilder(models.first().moduleClassName)
        }
            .addAnnotation(dagger.Module::class)
            .addAnnotation(getInstallInAnnotationSpec(models.first()))
            .addFunctions(models.map { model -> buildFunction(model) })
            .build()

    protected abstract fun buildFunction(model: T): FunSpec

    private fun FileSpec.Builder.addDefaultFileComment(): FileSpec.Builder =
        addFileComment(FILE_COMMENT)

    private fun getInstallInAnnotationSpec(model: Model): AnnotationSpec =
        AnnotationSpec.builder(if (model.isTest) testInstallInClassName else installInClassName)
            .addMember("%T::class", model.componentClassName)
            .build()

    companion object {
        private const val FILE_COMMENT = "Generated by Dagger Hilt Extensions\n" +
                "Read more: https://czerwinski.it/projects/android-hilt/"

        private val installInClassName = InstallIn::class.asClassName()
        private val testInstallInClassName = ClassName(packageName = "dagger.hilt.testing", "TestInstallIn")
    }
}
